// <auto-generated />
using System;
using DataAccess.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(BeaconContext))]
    partial class BeaconContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DataAccess.Models.BeaconInfo", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("gmac")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("msg")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("BeaconInfo", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.SensorInfo", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<string>("data1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("dmac")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("humidty")
                        .HasColumnType("float");

                    b.Property<int?>("majorID")
                        .HasColumnType("int");

                    b.Property<int?>("minorID")
                        .HasColumnType("int");

                    b.Property<int?>("refpower")
                        .HasColumnType("int");

                    b.Property<int>("rssi")
                        .HasColumnType("int");

                    b.Property<double>("temp")
                        .HasColumnType("float");

                    b.Property<string>("time")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("type")
                        .HasColumnType("int");

                    b.Property<string>("uuid")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("vbatt")
                        .HasColumnType("int");

                    b.Property<int>("ver")
                        .HasColumnType("int");

                    b.Property<int>("x0")
                        .HasColumnType("int");

                    b.Property<int>("y0")
                        .HasColumnType("int");

                    b.Property<int>("z0")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("SensorInfo", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.SensorInfo", b =>
                {
                    b.HasOne("DataAccess.Models.BeaconInfo", "beaconInfo")
                        .WithMany("obj")
                        .HasForeignKey("id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("beaconInfo");
                });

            modelBuilder.Entity("DataAccess.Models.BeaconInfo", b =>
                {
                    b.Navigation("obj");
                });
#pragma warning restore 612, 618
        }
    }
}
